
/*

Arnold to RadeonProRender Converter

History:
v.1.0 - first version

*/


global proc write_converted_property_log(string $rprMaterial, string $arnMaterial, string $attrRPR, string $attrARN) { 

    $filePath =    `file -q -sceneName` + ".log"; 
    $fileId = `fopen $filePath "a"`;  
    fprint $fileId ("    property " + $arnMaterial + "." + $attrARN + " converted to " + $rprMaterial + "." + $attrRPR + "   \r\n"); 
    fclose $fileId;   
} 

global proc write_own_property_log(string $text) { 

    $filePath =    `file -q -sceneName` + ".log";;  
    $fileId = `fopen $filePath "a"`;  
    fprint $fileId ("    " + $text + "   \r\n"); 
    fclose $fileId;   
} 

global proc int copyProperty(string $rprMaterial, string $arnMaterial, string $attrARN, string $attrRPR) { 

    // return value
    int $result = 0; 

    // full name of attribute
    string $tempARN = $arnMaterial + "." + $attrARN; 
    string $tempRPR = $rprMaterial + "." + $attrRPR;

    // value of attribute
    $varARN = `getAttr $tempARN`; 
    $varRPR = `getAttr $tempRPR`; 

    string $listConnections[] = `listConnections $tempARN`;
    string $source = `connectionInfo -sourceFromDestination $tempARN`;

    if (size($listConnections)>0) {
        string $typeConnection = `objectType $listConnections[0]`;
        // convert utilities
    }

    if (size($listConnections)>0) {   
        if (catch(`connectAttr -force $source ($rprMaterial + "." + $attrRPR)`)) { 
            write_own_property_log("Connection failed. Check the connectors. ");
        } else { 
            write_converted_property_log($rprMaterial, $arnMaterial, $attrRPR, $source);  
            $result = 1; 
        }  
    } else {
        if (catch(`setAttr $tempRPR $varARN`)) { 
            write_own_property_log("Copy failed. Check the values and their boundaries. ");
        } else { 
            write_converted_property_log($rprMaterial, $arnMaterial, $attrRPR, $attrARN);  
            $result = 1; 
        }   
    }

    return $result; 
} 

global proc int copyPropertyColor(string $rprMaterial, string $arnMaterial, string $attrARN, string $attrRPR) { 

    // return value
    int $result = 0; 

    // full name of attribute
    string $tempARN = $arnMaterial + "." + $attrARN; 
    string $tempRPR = $rprMaterial + "." + $attrRPR;

    // value of attribute
    $varRPR = `getAttr $tempRPR`; 
    $varARN_R = `getAttr ($tempARN + "R")`;
    $varARN_G = `getAttr ($tempARN + "G")`;
    $varARN_B = `getAttr ($tempARN + "B")`; 

    string $listConnections[] = `listConnections $tempARN`;
    string $source = `connectionInfo -sourceFromDestination $tempARN`;

    if (size($listConnections)>0) {
        string $typeConnection = `objectType $listConnections[0]`;
        // convert utilities
    }

    if (size($listConnections)>0) {   
        if (catch(`connectAttr -force $source ($rprMaterial + "." + $attrRPR)`)) { 
            write_own_property_log("Connection failed. Check the connectors. ");
        } else { 
            write_converted_property_log($rprMaterial, $arnMaterial, $attrRPR, $source);  
            $result = 1; 
        }  
    } else {
        if (catch(`setAttr $tempRPR $varARN_R $varARN_G $varARN_B`)) { 
            write_own_property_log("Copy failed. Check the values and their boundaries. ");
        } else { 
            write_converted_property_log($rprMaterial, $arnMaterial, $attrRPR, $attrARN); 
            $result = 1; 
        }   
    }

    return $result; 
} 
