global proc int searchColor(string $attr) {

    string $temp = "";

    for($i = 1; $i <= (size($attr)-1); $i++){
        for($j = $i; $j <= size($attr); $j++){
            $temp = substring($attr, $i, $j);
            if (($temp == "color") || ($temp == "Color")) {
            return 1;
            }
        }
    }
    return 0;
}

global proc makeTemplates() {
    
    // Get all materials
    string $listMaterials[] = `ls -materials`;

    // Make template for each type of material
    for ($each in $listMaterials){

        string $type = `objectType $each`;
  
        switch ($type) {

        case "aiAmbientOcclusion": makeTemplate ($each, "RPRUberMaterial"); break;
        case "aiFlat": makeTemplate ($each, "RPRUberMaterial"); break;
        case "aiMixShader": makeTemplate ($each, "RPRUberMaterial"); break;
        case "aiRaySwitch": makeTemplate ($each, "RPRUberMaterial"); break;
        case "aiShadowMatte": makeTemplate ($each, "RPRUberMaterial"); break;
        case "aiStandardHair": makeTemplate ($each, "RPRUberMaterial"); break;
        case "aiStandardSurface": makeTemplate ($each, "RPRUberMaterial"); break;
        case "aiSwitch": makeTemplate ($each, "RPRUberMaterial"); break;
        case "aiTwoSided": makeTemplate ($each, "RPRUberMaterial"); break;
        case "aiUtility": makeTemplate ($each, "RPRUberMaterial"); break;
        case "aiWireframe": makeTemplate ($each, "RPRUberMaterial"); break;
        default : break;

        }

    }

}
global proc makeTemplate(string $material, string $typeRPR){
   
    // Get list of attributes & create mel template
    string $listAttributes[] = `listAttr $material`;
    string $type = `objectType $material`;
    string $nameFile = "DragNDrop2convert.mel";
    $fileId = `fopen $nameFile "a"`;   

    // Create main function
    fprint $fileId ("/////////////////////// \n");
    fprint $fileId ("// "+  $type +" \n");
    fprint $fileId ("/////////////////////// \n\n");
    fprint $fileId ("global proc string convert" + $type + " (string $arnMaterial, string $typeRPR) { \n");
    fprint $fileId ("\n    // Get all properties of the material \n");
    fprint $fileId ("    string $attrs[] = `listAttr $arnMaterial`; \n\n");

    // Creating new RPR material
    fprint $fileId ("    // Creating new Uber material & SG or another material if you need\n");
    fprint $fileId ("    // Change type if you need\n");
    fprint $fileId ("    string $yourType = \"" + $typeRPR + "\"; \n");
    fprint $fileId ("    string $rpr = `shadingNode -asShader $yourType`; \n");
    fprint $fileId ("    string $sg = $rpr + \"SG\"; \n");
    fprint $fileId ("    sets -renderable true -noSurfaceShader true -empty -name $sg; \n");
    fprint $fileId ("    connectAttr -f ($rpr + \".outColor\") ($sg + \".surfaceShader\"); \n\n");

    // Rename RPR material to origin name of Arnold Material
    fprint $fileId ("    // Rename RPR material to origin name of Arnold Material  \n");
    fprint $fileId ("    rename $rpr ($arnMaterial + \"_rpr\"); \n");
    fprint $fileId ("    $rpr = $arnMaterial + \"_rpr\"; \n");
    fprint $fileId ("    string $mySGs[] = `listConnections -type shadingEngine $arnMaterial`; \n");
    fprint $fileId ("    rename $sg ($mySGs[0] + \"_rpr\"); \n");
    fprint $fileId ("    $sg = $mySGs[0] + \"_rpr\"; \n\n");

    // Set default properties, which are default enabled in RedShift.
    fprint $fileId ("    // Enable properties, which are default in Arnold. Some examples: \n");
    fprint $fileId ("    //setAttr ($rpr + \".diffuse\") 1; \n");
    fprint $fileId ("    //setAttr ($rpr + \".reflections\") 1; \n");
    fprint $fileId ("    //setAttr ($rpr + \".refraction\") 1; \n\n");

    fprint $fileId ("    string $type = `objectType $arnMaterial`; \n\n");

    // Logging in file
    fprint $fileId ("    // Logging in file \n");
    fprint $fileId ("    string $filePath = \"testing/scenesRPR/\" + \"log\";  \n");
    fprint $fileId ("    $fileId = `fopen $filePath \"a\"` ; \n"); 
    fprint $fileId ("    fprint $fileId (\"Found Arnold material: \\n    name: \" + $arnMaterial + \"\\n\"); \n");
    fprint $fileId ("    fprint $fileId (\"    type: \" + $type + \"\\n\"); \n");
    fprint $fileId ("    fprint $fileId (\"    shading engine: \" + $mySGs[0] + \"\\n\");\n");
    fprint $fileId ("    fprint $fileId (\"Converting to: \\n    name: \" + $rpr + \"\\n\"); \n");
    fprint $fileId ("    fprint $fileId (\"    type: \" + $typeRPR + \"\\n\"); \n");
    fprint $fileId ("    fprint $fileId (\"    shading engine: \" + $sg + \"\\n\"); \n");
    fprint $fileId ("    fprint $fileId (\"Conversion details: \\n\");  \n");
    fprint $fileId ("    fclose $fileId;  \n\n");
    
    // Create main loop with if 
    fprint $fileId ("    for ($attr in $attrs) {  \n\n");
    
    // Example 
    fprint $fileId ("        /*  \n\n");
    fprint $fileId ("        if ($attr == \"message\") {   \n");
    fprint $fileId ("            // manual settings:  \n");
    fprint $fileId ("            float $pr = `getAttr ($arnMaterial + \".\" + $attr)`;   \n");
    fprint $fileId ("            //check if there is connection   \n");
    fprint $fileId ("            string $rpr_attr_name = \"valid_rpr_attr_name\"   \n");
    fprint $fileId ("            string $result[] = listConnections ($arnMaterial + \".\" + $attr);    \n");
    fprint $fileId ("            if ($result[0] != \"\") {   \n");
    fprint $fileId ("                //uncomment one of the following   \n");
    fprint $fileId ("                //connectAttr -force ($result[0] + \".outColor\")  ($rpr + \".\" + $rpr_attr_name);   \n");
    fprint $fileId ("                //connectAttr -force ($result[0] + \".outAlpha\")  ($rpr + \".\" + $rpr_attr_name);   \n");
    fprint $fileId ("            } else {  \n");
    fprint $fileId ("                setAttr ( $rpr + \".\" + rpr_attr_name, $pr);   \n");
    fprint $fileId ("            }   \n");
    fprint $fileId ("            write_converted_property_log($rpr, $rs, $attrRPR, $attrRS);   \n");
    fprint $fileId ("        }\n\n        */  \n\n");

    fprint $fileId ("        // Uncomment and change \"rpr_attribute_name\" to valid RPR property name. Use copyPropertyColor only if you need to copy all 3 channels (RGB), else use simple copyProperty. \n");

    for ($each in $listAttributes) {
        if (searchColor($each)) {
            fprint $fileId ("        //if (($attr == \"" + $each +"\") && (copyPropertyColor($rprMaterial, $arnMaterial, $attr, \"rpr_attribute_name\"))) { continue; } \n" );
        } else {
            fprint $fileId ("        //if (($attr == \"" + $each +"\") && (copyProperty($rprMaterial, $arnMaterial, $attr, \"rpr_attribute_name\"))) { continue; } \n" );
        }
    }

    // Logging
    fprint $fileId ("}\n\n");
    fprint $fileId ("    string $filePath = \"testing/scenesRPR/\" + \"log\";  \n");
    fprint $fileId ("    $fileId = `fopen $filePath \"a\"` ; \n");
    fprint $fileId ("    fprint $fileId (\"End: \" + $arnMaterial);  \n");
    fprint $fileId ("    fprint $fileId (\"\\n\\n\\n\");  \n");
    fprint $fileId ("    fclose $fileId;  \n\n");  
    
    fprint $fileId ("    return $rpr; \n\n");  
    fprint $fileId ("}\n\n"); 
    fclose $fileId ; 
}

global proc appendFromFile(string $fileNameFrom, string $fileNameTo){
    $fileIdFrom = `fopen $fileNameFrom "r"`; 

    string $dataArray[] ;
    string $nextLine = `fgetline $fileIdFrom` ;
    while (size($nextLine) > 0) {
        string $cleanLine = $nextLine;
        $dataArray[size($dataArray)] = $cleanLine ;
        $nextLine = `fgetline $fileIdFrom` ;
    }
    //string $text = `fread $fileIdFrom $text`; 
    fclose $fileIdFrom ; 
    
    $fileIdTo = `fopen $fileNameTo "a"`;
    fprint $fileIdTo ("\n");

    for ($each in $dataArray){
        fprint $fileIdTo ($each);
    }

    fprint $fileIdTo ("\n");
    fclose $fileIdTo ; 
}

global proc makeCommon(string $scene){

    // Open scene
    file -f -open -type "mayaAscii" -iv $scene;

    //Open file
    string $fileNameTo = "DragNDrop2convert.mel";
    $fileIdTo = `fopen $fileNameTo "w"`;
    fclose $fileIdTo ; 
    
    appendFromFile("common.mel", $fileNameTo);
    makeTemplates();
    appendFromFile("converter.mel", $fileNameTo);
    //quit -abort;
}

